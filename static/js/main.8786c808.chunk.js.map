{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","store/reducers/root.reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","appBar","borderBottom","palette","divider","backgroundColor","toolbar","flexWrap","toolbarTitle","flexGrow","link","margin","spacing","textTransform","color","Header","classes","AppBar","position","elevation","className","Toolbar","Typography","variant","noWrap","Link","component","NavLink","to","Copyright","align","footer","borderTop","marginTop","padding","Footer","initialState","RootReducer","combineReducers","dummy","state","store","createStore","compose","applyMiddleware","thunk","devToolsEnhancer","createMuiTheme","Home","Container","Error404Page","App","ThemeProvider","CssBaseline","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAYMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAQ,CACNC,aAAa,aAAD,OAAeH,EAAMI,QAAQC,SACzCC,gBAAiB,QAEnBC,QAAS,CACPC,SAAU,QAEZC,aAAc,CACZC,SAAU,GAEZC,KAAM,CACJC,OAAQZ,EAAMa,QAAQ,EAAG,KACzBC,cAAe,OACf,UAAW,CACTC,MAAO,WAET,WAAY,CACVA,MAAO,iBA6DAC,EAvDA,WACb,IAAMC,EAAUnB,IAEhB,OACE,kBAACoB,EAAA,EAAD,CACEC,SAAS,SACTJ,MAAM,UACNK,UAAW,EACXC,UAAWJ,EAAQf,QAEnB,kBAACoB,EAAA,EAAD,CAASD,UAAWJ,EAAQV,SAC1B,kBAACgB,EAAA,EAAD,CACEC,QAAQ,KACRT,MAAM,UACNU,QAAM,EACNJ,UAAWJ,EAAQR,cAEnB,kBAACiB,EAAA,EAAD,CAAMX,MAAM,UAAUY,UAAWC,IAASC,GAAG,KAA7C,gBAIF,6BACE,kBAACH,EAAA,EAAD,CACEF,QAAQ,SACRT,MAAM,cACNM,UAAWJ,EAAQN,KACnBgB,UAAWC,IACXC,GAAG,aALL,YASA,kBAACH,EAAA,EAAD,CACEF,QAAQ,SACRT,MAAM,cACNM,UAAWJ,EAAQN,KACnBgB,UAAWC,IACXC,GAAG,WALL,aASA,kBAACH,EAAA,EAAD,CACEF,QAAQ,SACRT,MAAM,cACNM,UAAWJ,EAAQN,KACnBgB,UAAWC,IACXC,GAAG,SALL,YC1EJC,EAAY,WAChB,OACE,kBAACP,EAAA,EAAD,CAAYC,QAAQ,QAAQT,MAAM,gBAAgBgB,MAAM,UAAxD,0BAMEjC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX+B,OAAQ,CACNC,UAAU,aAAD,OAAejC,EAAMI,QAAQC,SACtC6B,UAAWlC,EAAMa,QAAQ,GACzBsB,QAASnC,EAAMa,QAAQ,SAcduB,EATA,WACb,IAAMnB,EAAUnB,IAChB,OACE,4BAAQuB,UAAWJ,EAAQe,QACzB,kBAAC,EAAD,Q,uCCvBAK,EAAe,GAIRC,EAAcC,0BAAgB,CAAEC,MAFxB,eAACC,EAAD,uDAASJ,EAAT,OAAuCI,KCM7CC,EALDC,sBACZL,EACAM,kBAAQC,0BAAgBC,KAAQC,2BAAiB,MCC7C/C,EAAQgD,YAAe,IAEvBC,EAAO,kBAAM,kBAACC,EAAA,EAAD,eAEbC,EAAe,kBAAM,kBAACD,EAAA,EAAD,aAsBZE,EApBH,WACV,OACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAACW,EAAA,EAAD,CAAerD,MAAOA,GACpB,kBAACsD,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI7B,UAAWsB,IACjC,kBAAC,IAAD,CAAOO,KAAK,KACV,kBAAC,EAAD,QAGJ,kBAAC,EAAD,UCdUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8786c808.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  makeStyles,\n  Theme,\n  Link,\n  createStyles,\n} from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      borderBottom: `1px solid ${theme.palette.divider}`,\n      backgroundColor: '#fff',\n    },\n    toolbar: {\n      flexWrap: 'wrap',\n    },\n    toolbarTitle: {\n      flexGrow: 1,\n    },\n    link: {\n      margin: theme.spacing(1, 1.5),\n      textTransform: 'none',\n      '&:hover': {\n        color: '#EA7F28',\n      },\n      '&.active': {\n        color: '#EA7F28',\n      },\n    },\n  }),\n);\n\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar\n      position=\"static\"\n      color=\"default\"\n      elevation={0}\n      className={classes.appBar}\n    >\n      <Toolbar className={classes.toolbar}>\n        <Typography\n          variant=\"h6\"\n          color=\"inherit\"\n          noWrap\n          className={classes.toolbarTitle}\n        >\n          <Link color=\"inherit\" component={NavLink} to=\"/\">\n            Auto1 Group\n          </Link>\n        </Typography>\n        <nav>\n          <Link\n            variant=\"button\"\n            color=\"textPrimary\"\n            className={classes.link}\n            component={NavLink}\n            to=\"/purchase\"\n          >\n            Purchase\n          </Link>\n          <Link\n            variant=\"button\"\n            color=\"textPrimary\"\n            className={classes.link}\n            component={NavLink}\n            to=\"/orders\"\n          >\n            My Orders\n          </Link>\n          <Link\n            variant=\"button\"\n            color=\"textPrimary\"\n            className={classes.link}\n            component={NavLink}\n            to=\"/sell\"\n          >\n            Sell\n          </Link>\n        </nav>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { makeStyles, createStyles, Theme, Typography } from '@material-ui/core';\n\nconst Copyright = () => {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      Â© AUTO1 Group 2020\n    </Typography>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    footer: {\n      borderTop: `1px solid ${theme.palette.divider}`,\n      marginTop: theme.spacing(8),\n      padding: theme.spacing(2),\n    },\n  }),\n);\n\nconst Footer = () => {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <Copyright />\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { combineReducers } from 'redux';\n\nconst initialState = {};\n\nconst DummyReducer = (state = initialState, action: any) => state;\n\nexport const RootReducer = combineReducers({ dummy: DummyReducer });\n\nexport type RootState = ReturnType<typeof RootReducer>;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { RootReducer } from './reducers/root.reducer';\n\nconst store = createStore(\n  RootReducer,\n  compose(applyMiddleware(thunk), devToolsEnhancer({})),\n);\n\nexport default store;\n","import React from 'react';\nimport { CssBaseline, Container, createMuiTheme } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { Footer, Header } from './components';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport store from './store';\n\nconst theme = createMuiTheme({});\n\nconst Home = () => <Container>Hello</Container>;\n\nconst Error404Page = () => <Container>404</Container>;\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"*\">\n              <Error404Page />\n            </Route>\n          </Switch>\n          <Footer />\n        </Router>\n      </ThemeProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}